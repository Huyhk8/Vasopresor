import streamlit as st
import pandas as pd
import joblib
import numpy as np
import matplotlib.pyplot as plt

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Vasopressor Prediction", page_icon="üß¨", layout="centered")
st.title("üß¨ Vasopressor Prediction App")
st.write("·ª®ng d·ª•ng d·ª± ƒëo√°n kh·∫£ nƒÉng c·∫ßn s·ª≠ d·ª•ng **vasopressor** cho b·ªánh nh√¢n ICU.")

# --- Load m√¥ h√¨nh ---
@st.cache_resource
def load_model():
    try:
        model = joblib.load("vasopressor_predictor.pkl")
        return model
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ load m√¥ h√¨nh: {e}")
        st.stop()

model = load_model()

# --- L·∫•y danh s√°ch feature c·ªßa m√¥ h√¨nh ---
if hasattr(model, "feature_names_in_"):
    model_features = list(model.feature_names_in_)
else:
    model_features = ["age", "heartrate", "map", "spo2", "lactate"]

# --- Nh·∫≠p li·ªáu ng∆∞·ªùi d√πng ---
st.header("üìã Nh·∫≠p d·ªØ li·ªáu b·ªánh nh√¢n")

age = st.number_input("Tu·ªïi", min_value=0, max_value=120, value=65)
heartrate = st.number_input("Nh·ªãp tim (bpm)", min_value=0, max_value=250, value=90)
map_value = st.number_input("Mean Arterial Pressure (MAP)", min_value=0, max_value=200, value=70)
spo2 = st.number_input("SpO‚ÇÇ (%)", min_value=0, max_value=100, value=95)
lactate = st.number_input("Lactate (mmol/L)", min_value=0.0, max_value=20.0, value=2.0)

# --- Chu·∫©n b·ªã input cho m√¥ h√¨nh ---
user_input = pd.DataFrame({
    "age": [age],
    "heartrate": [heartrate],
    "map": [map_value],
    "spo2": [spo2],
    "lactate": [lactate]
})

# Chu·∫©n h√≥a ƒë·ªÉ kh·ªõp t√™n c·ªôt m√¥ h√¨nh
X_input = pd.DataFrame(columns=model_features)
for col in model_features:
    X_input[col] = user_input[col] if col in user_input.columns else [0]

# --- N√∫t d·ª± ƒëo√°n ---
if st.button("üß† D·ª± ƒëo√°n"):
    try:
        pred = model.predict(X_input)[0]
        prob = model.predict_proba(X_input)[0][1] if hasattr(model, "predict_proba") else None

        st.success(f"‚úÖ K·∫øt qu·∫£: {'C·∫ßn vasopressor' if pred == 1 else 'Kh√¥ng c·∫ßn vasopressor'}")

        if prob is not None:
            st.write(f"üîπ X√°c su·∫•t c·∫ßn vasopressor: **{prob:.2%}**")
            st.progress(float(prob))

            # --- V·∫Ω bi·ªÉu ƒë·ªì thanh th·ªÉ hi·ªán x√°c su·∫•t ---
            st.subheader("üìä X√°c su·∫•t d·ª± ƒëo√°n")
            fig, ax = plt.subplots(figsize=(5, 2))
            ax.barh(["Vasopressor"], [prob], color="red" if prob > 0.5 else "green")
            ax.set_xlim(0, 1)
            ax.set_xlabel("X√°c su·∫•t")
            ax.set_title("Kh·∫£ nƒÉng c·∫ßn d√πng vasopressor")
            for i, v in enumerate([prob]):
                ax.text(v + 0.02, i, f"{v:.2%}", va="center", fontweight="bold")
            st.pyplot(fig)

        # --- Bi·ªÉu ƒë·ªì so s√°nh gi√° tr·ªã b·ªánh nh√¢n ---
        st.subheader("üìà So s√°nh th√¥ng s·ªë b·ªánh nh√¢n")
        normal_ranges = {
            "age": (20, 80),
            "heartrate": (60, 100),
            "map": (70, 105),
            "spo2": (94, 100),
            "lactate": (0.5, 2.2)
        }

        values = [age, heartrate, map_value, spo2, lactate]
        features = ["Tu·ªïi", "Nh·ªãp tim", "MAP", "SpO‚ÇÇ", "Lactate"]
        normal_low = [normal_ranges[f][0] for f in normal_ranges]
        normal_high = [normal_ranges[f][1] for f in normal_ranges]

        fig2, ax2 = plt.subplots(figsize=(7, 3))
        ax2.bar(features, values, color="skyblue", label="Gi√° tr·ªã b·ªánh nh√¢n")
        ax2.plot(features, normal_low, "g--", label="Gi·ªõi h·∫°n th·∫•p (b√¨nh th∆∞·ªùng)")
        ax2.plot(features, normal_high, "r--", label="Gi·ªõi h·∫°n cao (b√¨nh th∆∞·ªùng)")
        ax2.set_ylabel("Gi√° tr·ªã")
        ax2.set_title("So s√°nh th√¥ng s·ªë v·ªõi kho·∫£ng b√¨nh th∆∞·ªùng")
        ax2.legend()
        st.pyplot(fig2)

    except Exception as e:
        st.error(f"‚ö†Ô∏è L·ªói khi d·ª± ƒëo√°n: {e}")
